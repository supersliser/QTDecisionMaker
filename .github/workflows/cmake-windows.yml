name: Build Windows App

on:
  push:
    branches: [ "production" ]
  pull_request:
    branches: [ "production" ]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.0'
          modules: 'qt5compat qtmultimedia qtnetworkauth qtpositioning qtcharts qtvirtualkeyboard qtwebchannel qtwebsockets qtwebview'

      - name: Configure CMake
        run: |
          cmake -B build `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} `
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake `
          -DBUILD_TESTING=OFF

      - name: Build
        run: cmake --build build --config Release --verbose --target QTDecisionMaker

      - name: Debug vcpkg and dependency information
        shell: bash
        run: |
          echo "=== vcpkg information ==="
          ls -la vcpkg/installed/ || echo "vcpkg/installed not found"
          ls -la vcpkg/installed/x64-windows/bin/ || echo "vcpkg x64-windows bin not found"
          echo "=== Build directory contents ==="
          find build -name "*.dll" -o -name "*.exe" | head -20
          echo "=== CMake cache info ==="
          grep -i "vcpkg\|qt\|fmt" build/CMakeCache.txt | head -10 || echo "No relevant cache entries found"

      - name: Build Installer Package
        run: |
          cd build
          cpack -G NSIS -C Release

      - name: Validate DLL Deployment
        shell: bash
        run: |
          cd build
          # Install to a temporary directory first to validate
          cmake --install . --prefix ./install --config Release
          # Run validation script
          cmake -DCMAKE_INSTALL_PREFIX=./install -P ../validate_dll_deployment.cmake

      - name: List build directory
        run: Get-ChildItem -Path build -Recurse -Filter "*QTDecisionMaker*" | Select-Object FullName

      - name: Find Executable
        id: find_exe
        shell: bash
        run: |
          exe=$(find build -type f -name "QTDecisionMaker.exe" | head -n 1)
          if [ -z "$exe" ]; then
            echo "No executable found!"
            exit 1
          fi
          echo "exe_path=$exe" >> $GITHUB_OUTPUT
          echo "Found executable at: $exe"

      - name: Find Installer
        id: find_installer
        shell: bash
        run: |
          installer=$(find build -type f -name "*.exe" -path "*/QTDecisionMaker-*" | head -n 1)
          if [ -z "$installer" ]; then
            echo "No installer found, checking for NSIS output..."
            find build -name "*.exe" -o -name "*QTDecisionMaker*"
            installer=$(find build -type f -name "QTDecisionMaker-*.exe" | head -n 1)
            if [ -z "$installer" ]; then
              echo "Still no installer found!"
              exit 1
            fi
          fi
          echo "installer_path=$installer" >> $GITHUB_OUTPUT
          echo "Found installer at: $installer"

      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: windows-executable
          path: ${{ steps.find_exe.outputs.exe_path }}

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ${{ steps.find_installer.outputs.installer_path }}

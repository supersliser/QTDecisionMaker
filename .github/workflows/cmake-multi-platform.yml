name: Build and Upload Executables (Linux & Windows)

on:
  push:
    branches: [ "Production" ]
  pull_request:
    branches: [ "Production" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ---------- LINUX ----------
    - name: Install Qt and fmt (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake qt6-base-dev libfmt-dev

    # ---------- WINDOWS ----------
    - name: Run vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      uses: lukka/run-vcpkg@v11

    - name: Set up MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    # ---------- CMAKE CONFIGURE ----------
    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S .

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S . -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

    # ---------- BUILD ----------
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    # ---------- FIND EXECUTABLES ----------
    - name: Find Executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      id: find_exe_linux
      run: |
        exe=$(find build -type f -executable -name QTDecisionMaker | head -n 1)
        echo "exe_path=$exe" >> $GITHUB_OUTPUT

    - name: Find Executable (Windows)
      if: matrix.os == 'windows-latest'
      id: find_exe_win
      shell: pwsh
      run: |
        $exe = Get-ChildItem -Path build -Recurse -Filter QTDecisionMaker.exe | Select-Object -First 1
        echo "exe_path=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    # ---------- UPLOAD ARTIFACTS ----------
    - name: Upload Linux Executable
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-executable
        path: ${{ steps.find_exe_linux.outputs.exe_path }}

    - name: Upload Windows Executable
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: ${{ steps.find_exe_win.outputs.exe_path }}
